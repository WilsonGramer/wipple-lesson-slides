<div data-stepper>
    <button id="prev">&uarr;</button>
    <button id="next">&darr;</button>

    <div class="content">
        <div class="scroll">
            <slot />
        </div>

        <div class="active"></div>
    </div>
</div>

<style>
    @reference "tailwindcss";

    [data-stepper] {
        @apply relative flex flex-1 flex-col;

        button {
            @apply my-2 flex size-8 items-center justify-center rounded-lg bg-gray-100 text-blue-500 transition-colors hover:bg-gray-200;
        }

        .content {
            @apply absolute inset-0 flex flex-1 flex-row gap-8 overflow-y-clip;
        }

        .scroll {
            @apply pointer-events-none flex flex-1 flex-col overflow-x-auto overflow-y-scroll py-[50vh] select-text;
            scrollbar-width: none;
            view-transition-name: none;
        }

        .scroll > :global(section) {
            @apply pointer-events-auto w-full transition-colors;
        }

        .scroll > :global(section[data-active]) {
            @apply my-4;
        }

        .scroll > :global(section):not([data-active]) {
            @apply opacity-20;
        }

        .active {
            @apply pointer-events-auto flex flex-1 flex-col items-stretch justify-center overflow-x-auto;
        }
    }
</style>

<script>
    for (const stepper of document.querySelectorAll<HTMLElement>("[data-stepper]")) {
        const scroll = stepper.querySelector("& > .content > .scroll")!;
        const active = stepper.querySelector("& > .content > .active")!;

        const sections = scroll.querySelectorAll<HTMLElement>("& > section");
        if (sections.length === 0) continue;

        const asides = Iterator.from(sections)
            .map((item) => {
                const aside = item.querySelector("aside");
                if (aside) aside.remove();
                return aside;
            })
            .toArray();

        const prevButton = stepper.querySelector("button#prev")!;
        const nextButton = stepper.querySelector("button#next")!;

        let activeIndex = window.location.hash ? parseInt(window.location.hash.slice(1)) : 0;

        const prevIndex = () => Math.max(0, activeIndex - 1);
        const nextIndex = () => Math.min(activeIndex + 1, sections.length - 1);

        const scrollTo = (index: number, behavior: ScrollBehavior = "smooth") => {
            const current = sections[activeIndex];
            const next = sections[index];

            delete current.dataset.active;
            next.dataset.active = "active";

            prevButton.remove();
            nextButton.remove();
            if (index > 0) next.prepend(prevButton);
            if (index < sections.length - 1) next.appendChild(nextButton);

            next.scrollIntoView({
                behavior,
                block: "center",
            });

            asides[activeIndex]?.remove();
            if (asides[index]) active.appendChild(asides[index]);

            activeIndex = index;
            window.location.hash = index.toString();
        };

        scrollTo(activeIndex, "instant");

        prevButton.addEventListener("click", () => scrollTo(prevIndex()));
        nextButton.addEventListener("click", () => scrollTo(nextIndex()));

        window.addEventListener("keydown", (e) => {
            switch (e.key) {
                case "ArrowUp":
                    e.preventDefault();
                    scrollTo(prevIndex());
                    break;
                case "ArrowDown":
                    e.preventDefault();
                    scrollTo(nextIndex());
                    break;
                default:
                    break;
            }
        });

        scroll.addEventListener("wheel", (e) => e.preventDefault(), { passive: false });
        scroll.addEventListener("touchmove", (e) => e.preventDefault(), { passive: false });
    }
</script>
